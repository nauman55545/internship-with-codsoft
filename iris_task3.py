# -*- coding: utf-8 -*-
"""Iris_Task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vqh_OpPaHQQ6lTT-Ib0PuemcK-itlhVo
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sbn
import plotly.express as px

from google.colab import files
uploaded = files.upload()

import io
id = pd.read_csv(io.BytesIO(uploaded['IRIS (2).csv']))

id.head(10)

id.shape

id.isnull().sum()

id.info()

id.describe()

from sklearn.preprocessing import LabelEncoder
from pandas.core.dtypes.common import is_numeric_dtype
le = LabelEncoder()

for i in id.columns:
  if is_numeric_dtype(id[i]):
    continue
  else:
      id[i] = le.fit_transform(id[i])

id.info()

sbn.countplot(x = 'species', data = id, palette = 'Set2')
plt.show()

sbn.histplot(data = id, x = 'sepal_length', kde = True ,color = 'red')
plt.show()

sbn.violinplot(x='species', y='sepal_length', data=id)
plt.show()

sbn.histplot(data = id, x = 'sepal_width', kde = True ,color = 'green')
plt.show()

sbn.violinplot(x='species', y='sepal_width', data=id)
plt.show()

sbn.histplot(data = id, x = 'petal_length', kde = True ,color = 'blue')
plt.show()

sbn.violinplot(x='species', y='petal_length', data=id)
plt.show()

sbn.histplot(data = id, x = 'petal_width', kde = True ,color = 'yellow')
plt.show()

sbn.violinplot(x='species', y='petal_width', data=id)
plt.show()

sbn.pairplot(id, hue='species')
plt.show()

species_counts = id['species'].value_counts()
labels = species_counts.index
sizes = species_counts.values

plt.figure(figsize=(6, 6))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Species')
plt.show()

corr = id.corr()
mask = np.triu(np.ones_like(corr, dtype=bool))
sbn.heatmap(corr, annot=True, mask=mask)
plt.show()

from sklearn.model_selection import train_test_split

id.columns

x = id.drop(['species'], axis = 1)

y = id.species

x_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.2)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(x_train,y_train)

print("SCORE FOR THE TRAIN DATA",model.score(x_train,y_train))
print("SCORE FOR THE TEST DATA",model.score(x_test,y_test))

from sklearn.ensemble import RandomForestClassifier

model2= RandomForestClassifier()
model2.fit(x_train,y_train)

print("SCORE FOR THE TRAIN DATA",model2.score(x_train,y_train))
print("SCORE FOR THE TEST DATA",model2.score(x_test,y_test))

from sklearn.neighbors import KNeighborsClassifier

model3 = KNeighborsClassifier()
model3.fit(x_train,y_train)

print("SCORE FOR THE TRAIN DATA",model3.score(x_train,y_train))
print("SCORE FOR THE TEST DATA",model3.score(x_test,y_test))

id.head(10)

id2 = {'sepal_length':[5.2] , 'sepal_width':[3.6], 'petal_length':[1.4], 'petal_width':[0.2] }
trail = pd.DataFrame(id2)

result = model.predict(trail)
print("Result of the Species is :",result)