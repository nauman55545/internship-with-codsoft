# -*- coding: utf-8 -*-
"""titanic_task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NZTQ3X44ymUNdi1j_ZNzpNN7yMC96bA4
"""

# 1. Importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# 2. Uploading and loading data
from google.colab import files
uploaded = files.upload()

titanicdata = pd.read_csv("Titanic-Dataset.csv")

titanicdata

titanicdata.shape

titanicdata.info()

titanicdata.isnull().sum()

# Drop 'Cabin' column due to many missing values
data = titanicdata.drop(columns='Cabin', axis=1)

# Fill missing values
average_age = data['Age'].mean()
data['Age'].fillna(average_age, inplace=True)

most_common = data['Embarked'].mode()[0]
data['Embarked'].fillna(most_common, inplace=True)

# Confirm no more missing values
total_missing = data.isnull().sum().sum()
print(total_missing)

survival_counts = data['Survived'].value_counts()
print(survival_counts)

titanicdata.describe()

sns.set()

sns.countplot(x='Survived', data=titanicdata, palette={'0': 'red', '1': 'green'})

sns.countplot(x='Sex', data=titanicdata, palette={'male': 'red', 'female': 'pink'})

sns.countplot(x='Sex', hue='Survived', data=titanicdata,palette={0: 'red', 1: 'green'})

sns.countplot(x='Pclass', data=titanicdata, palette={'1': 'red', '2': 'blue', '3': 'green'})

sns.countplot(x='Pclass', hue='Survived', data=titanicdata, palette={0: 'red', 1: 'green'})

titanicdata['Survived'].plot(kind='line',figsize=(9,5),title='Survived')
plt.gca().spines[['top','right']].set_visible(False)

# Heatmap for null values
sns.heatmap(titanicdata.isnull())
plt.title("Missing Values Heatmap")
plt.show()

titanicdata['Sex'].value_counts()

titanicdata['Embarked'].value_counts()

mapping = {
    'Sex': {'male': 0, 'female': 1},
    'Embarked': {'S': 0, 'C': 1, 'Q': 2}
}
titanicdata.replace(mapping, inplace=True)

titanicdata

# Encode categorical features
data.replace({
    'Sex': {'male': 0, 'female': 1},
    'Embarked': {'S': 0, 'C': 1, 'Q': 2}
}, inplace=True)

x = data.drop(columns=['PassengerId', 'Name', 'Ticket'])

y=data['Survived']

print(x)

print(y)

x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=2,  test_size=0.2)

print(x.shape,  x_test.shape, x_train.shape)

model=LogisticRegression()

model.fit(x_train,y_train)

LogisticRegression()

x_train_prediction=model.predict(x_train)

print(x_train_prediction)

train_data_accuracy=accuracy_score(y_train, x_train_prediction)

x_test_prediction = model.predict(x_test)

print(x_test_prediction)

print("Accuracy Score of training data: ",train_data_accuracy)

test_data_accuracy=accuracy_score(y_test,x_test_prediction)

print("Accuracy score of testing data:",test_data_accuracy)